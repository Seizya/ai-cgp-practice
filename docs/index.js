(function () {
    'use strict';

    function isChrome() {
        return navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    }
    function onLoad(fn) {
        window.addEventListener("load", fn);
    }
    function opt(defaultValue, value) {
        if (value === undefined)
            return defaultValue;
        return value;
    }

    function ge(id) {
        return document.getElementById(id);
    }
    function onClick(elm, fn) {
        elm.addEventListener("click", fn);
    }

    class Canvas {
        constructor(canvas, parent, shouldFitSize = true) {
            this.canvas = canvas;
            this.parent = parent;
            const ctx = canvas.getContext("2d", { alpha: false });
            if (!ctx)
                throw `Failed: canvas.getContext("2d")`;
            this.ctx = ctx;
            this.ctxH = 0;
            this.ctxW = 0;
            if (shouldFitSize)
                this.fitSizeAndClear();
        }
        fitSizeAndClear(color) {
            const c = this.canvas, p = this.parent;
            const dpr = window.devicePixelRatio || 1;
            c.style.width = p.clientWidth + "px";
            c.style.height = p.clientHeight + "px";
            this.ctxW = c.width = p.clientWidth * dpr;
            this.ctxH = c.height = p.clientHeight * dpr;
            this.ctx.lineWidth = dpr;
            this.clear(color);
        }
        clear(color) {
            const c = this.ctx;
            if (color) {
                c.closePath();
                c.fillStyle = color;
                c.fillRect(0, 0, this.ctxW, this.ctxH);
            }
            else {
                c.clearRect(0, 0, this.ctxW, this.ctxH);
            }
        }
        getTexture(image, x, y, srcW, srcH, dstW, dstH) {
            x = opt(0, x);
            y = opt(0, y);
            srcW = opt(image.width, srcW);
            srcH = opt(image.height, srcH);
            dstW = opt(srcW, dstW);
            dstH = opt(srcH, dstH);
            return {
                image: image,
                ready: true,
                srcX: x, srcY: y,
                srcH, srcW, dstW, dstH
            };
        }
        texture(texture, cx, cy, rot) {
            const c = this.ctx;
            const t = texture;
            if (rot) {
                const f = c.getTransform(), w = t.dstW, h = t.dstH;
                c.translate(cx, cy);
                c.rotate(rot);
                c.drawImage(t.image, t.srcX, t.srcY, t.srcW, t.srcH, -w / 2, -h / 2, t.dstW, t.dstH);
                c.setTransform(f);
            }
            else {
                c.drawImage(t.image, t.srcX, t.srcY, t.srcW, t.srcH, cx - t.dstW / 2, cy - t.dstH / 2, t.dstW, t.dstH);
            }
        }
        ellipse(fill, stroke, cx, cy, w, h, rot) {
            const c = this.ctx;
            c.fillStyle = fill;
            c.strokeStyle = stroke;
            c.beginPath();
            if (rot) {
                const f = c.getTransform();
                c.translate(cx, cy);
                c.rotate(rot);
                c.ellipse(0, 0, w / 2, opt(w, h) / 2, 0, 0, Math.PI * 2);
                c.setTransform(f);
            }
            else {
                c.ellipse(cx, cy, w / 2, opt(w, h) / 2, 0, 0, Math.PI * 2);
            }
            c.closePath();
            if (fill.length)
                c.fill();
            if (stroke.length)
                c.stroke();
        }
        rect(fill, stroke, cx, cy, w, h, rot) {
            h = opt(w, h);
            const c = this.ctx;
            c.fillStyle = fill;
            c.strokeStyle = stroke;
            c.beginPath();
            if (rot) {
                const t = c.getTransform();
                c.translate(cx, cy);
                c.rotate(rot);
                c.rect(-w / 2, -h / 2, w, h);
                c.setTransform(t);
            }
            else {
                c.rect(cx - w / 2, cy - h / 2, w, h);
            }
            c.closePath();
            if (fill.length)
                c.fill();
            if (stroke.length)
                c.stroke();
        }
        flush() {
        }
    }

    const dummyPerfReporter = {
        perfOfDraw: () => { },
        perfOfUpdate: () => { },
    };
    class GameLoop {
        constructor(funcs, updatePeriod = 1000 / 60, maxLag = Math.max(50, updatePeriod * 4)) {
            this.funcs = funcs;
            this.updatePeriod = updatePeriod;
            this.maxLag = maxLag;
            this.perfReporter = dummyPerfReporter;
            this.isStarted = false;
            this.aniHandler = 0;
            funcs.init();
        }
        start() {
            if (this.isStarted)
                return;
            let lag = 0, prevTime = -1;
            const fn = () => {
                const now = performance.now();
                if (prevTime < 0) {
                    prevTime = now;
                }
                lag += now - prevTime;
                prevTime = now;
                if (lag > this.maxLag) {
                    lag = 0;
                    console.log("timeout.");
                }
                else {
                    const updateCount = (lag / this.updatePeriod) << 0;
                    lag %= this.updatePeriod;
                    const beforeUpdates = performance.now();
                    for (let i = 0; i < updateCount; i++)
                        this.funcs.update();
                    if (updateCount > 0)
                        this.perfReporter.perfOfUpdate(performance.now() - beforeUpdates, updateCount);
                    const beforeDraw = performance.now();
                    this.funcs.draw((lag + (performance.now() - now)) / this.updatePeriod);
                    this.perfReporter.perfOfDraw(performance.now() - beforeDraw);
                }
                this.aniHandler = requestAnimationFrame(fn);
            };
            this.aniHandler = requestAnimationFrame(fn);
            this.isStarted = true;
            this.funcs.resume();
        }
        pause() {
            if (!this.isStarted)
                return;
            cancelAnimationFrame(this.aniHandler);
            this.isStarted = false;
            this.funcs.pause();
        }
        isRunning() {
            return this.isStarted;
        }
    }

    showConsoleBanner();
    onLoad(() => {
        const beginGame = ge("begin_game");
        onClick(beginGame, function fn() {
            beginGame.removeEventListener("click", fn);
            startGame();
        });
    });
    function startGame() {
        const img = new Image();
        img.src = "icon.svg";
        const c = new Canvas(ge("game_main_canvas"), ge("game_view"));
        window.addEventListener("resize", () => c.fitSizeAndClear());
        const loop = new GameLoop({
            init: () => 0, resume: () => 0, pause: () => 0,
            update: () => { },
            draw: (leftover) => {
                c.clear("#ded");
                c.rect("#eee", "#222", 100, 100, 100, 100);
                c.texture(c.getTexture(img, 0, 0, 512, 512, 100, 100), 300, 100);
                c.ellipse("#eee", "#222", 500, 100, 100, 50);
                c.ellipse("#eee", "", 700, 100, 150);
                c.rect("", "#222", 700, 100, 100, 50, leftover * Math.PI);
            }
        }, 1000);
        loop.start();
        loop.perfReporter = {
            perfOfDraw: ts => ts < 10 ? 0 : console.log("draw... ", ts.toFixed(1)),
            perfOfUpdate: (ts, cnt) => (ts / cnt) < 10 ? 0 : console.log("update. ", (ts / cnt).toFixed(1)),
        };
        window["l"] = loop;
    }
    function showConsoleBanner() {
        if (isChrome()) {
            console.log("\n" +
                `%c %c AI CGP Practice\n` +
                "%c %c Made by omasakun in 2019\n" +
                "%c %c GitHub: https://github.com/omasakun/ai-cgp-practice\n" +
                "%c %c Author: https://github.com/omasakun\n" +
                "%c %c Enjoy!\n", "color: #130f40; background-color: #a799ef; line-height: 2;", "color: #ddd6ff; background-color: #524983; line-height: 2;", "color: #130f40; background-color: #a799ef; line-height: 1.5;", "", "color: #130f40; background-color: #a799ef; line-height: 1.5;", "", "color: #130f40; background-color: #a799ef; line-height: 1.5;", "", "color: #130f40; background-color: #a799ef; line-height: 1.5;", "font-weight: bold");
        }
        else {
            console.log("\n" +
                `┃ ### AI CGP Practice ### \n` +
                "┃ \n" +
                "┃ Made by omasakun in 2019\n" +
                "┃ GitHub: https://github.com/omasakun/ai-cgp-practice\n" +
                "┃ Author: https://github.com/omasakun\n" +
                "┃ Enjoy!\n");
        }
    }

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsLnRzIiwiLi4vLi4vLi4vc3JjL2RvbS50cyIsIi4uLy4uLy4uL3NyYy9ncmFwaGljcy50cyIsIi4uLy4uLy4uL3NyYy9mcmFtZXdvcmsudHMiLCIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gw6PCgsKPw6PCgcKWw6PCgsKPw6PCgcKWw6PCg8KVw6PCgsKhw6PCgsKkw6PCg8Krw6PCgcKrw6XCiMKGw6PCgcKRw6PCgsKLw6PCgcK+w6PCgcKnw6PCgsKCw6PCgcKqw6PCgcKEw6nClsKiw6bClcKww6fCvsKkXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Nocm9tZSgpIHtcblx0cmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdjaHJvbWUnKSA+IC0xO1xufVxuXG4vLyBvbldpbmRvd0xvYWRlZFxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZChmbjogKCkgPT4gYW55KSB7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmbik7XG59XG4vLyBvbkRvbUxvYWRlZFxuZXhwb3J0IGZ1bmN0aW9uIG9uRG9tTG9hZChmbjogKCkgPT4gYW55KSB7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmbik7XG59XG4vLyBvbkFuaW1hdGlvbkZyYW1lXG5leHBvcnQgZnVuY3Rpb24gb25BbmltKGZuOiAoKSA9PiB7IGNvbnRpbnVlOiBib29sZWFuIH0pIHtcblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIHRtcCgpIHtcblx0XHRpZiAoZm4oKS5jb250aW51ZSkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRtcCk7XG5cdH0pO1xufVxuXG4vKiogw6nCncKZw6fCmsKEw6XCnsKLw6PCg8KBw6PCgsKnw6PCg8KDw6PCgsKvw6PCgcKnw6PCgsKCw6XCrsKfw6jCocKMw6bCmcKCw6PCg8KBw6PCgsKnw6PCg8KDw6PCgsKvw6PCgcKnw6PCgsKCw6PCgsKow6PCg8Kpw6PCg8K8w6PCgcKMw6XCh8K6w6PCgcKmw6PCgcKPw6PCgsKMw6PCgsKLw6PCgsKkw6PCgsKkw6PCg8Kkw6PCg8KEICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBmdW5jdGlvbiBuZXZlckhlcmUoXzogbmV2ZXIpIHtcblx0dGhyb3cgXCJCVUchISFcIjtcbn1cblxuLy8gb3B0aW9uYWxcbmV4cG9ydCBmdW5jdGlvbiBvcHQ8VD4oZGVmYXVsdFZhbHVlOiBULCB2YWx1ZT86IFQgfCB1bmRlZmluZWQpIHtcblx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0VmFsdWU7XG5cdHJldHVybiB2YWx1ZTtcbn1cbiIsIi8vIERPTcOpwpbCosOkwr/CglxuXG4vLyBUT0RPOiDDo8KBwpPDo8KBwq7Do8KDwpXDo8KCwqHDo8KCwqTDo8KDwqvDo8KBwq/Do8KCwrLDo8KDwrzDo8KDwqDDo8KCwqjDo8KDwrPDo8KCwrjDo8KDwrPDo8KBwqvDpcKQwqvDo8KCwoHDo8KCwovDo8KBwrnDo8KBwo3Do8KBwqfDo8KBwq/Do8KBwqrDo8KBwoTDpsKwwpfDo8KBwozDo8KBwpnDo8KCwotcblxuLy8gZ2V0RWxlbWVudEJ5SWRcbmV4cG9ydCBmdW5jdGlvbiBnZTxUIGV4dGVuZHMgSFRNTEVsZW1lbnQgPSBIVE1MRWxlbWVudD4oaWQ6IHN0cmluZykge1xuXHRyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIFQ7XG59XG4vLyBnZXRBbGxFbGVtZW50c0J5UXVlcnlcbmV4cG9ydCBmdW5jdGlvbiBnZXFhKHNlbGVjdG9yczogc3RyaW5nKSB7XG5cdHJldHVybiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzKSlcbn1cbi8vIGdldEVsZW1lbnRCeVF1ZXJ5XG5leHBvcnQgZnVuY3Rpb24gZ2VxKHNlbGVjdG9yczogc3RyaW5nKSB7XG5cdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycylcbn1cbi8vIGNyZWF0ZUVsZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiBjZTxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPih0YWdOYW1lOiBLLCBjbGFzc2VzOiBzdHJpbmdbXSA9IFtdLCBjaGlsZHJlbjogSFRNTEVsZW1lbnRbXSA9IFtdKTogSFRNTEVsZW1lbnRUYWdOYW1lTWFwW0tdIHtcblx0Y29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG5cdGNsYXNzZXMuZm9yRWFjaChfID0+IGFkZEMoZSwgXykpO1xuXHRjaGlsZHJlbi5mb3JFYWNoKF8gPT4gZS5hcHBlbmRDaGlsZChfKSk7XG5cdHJldHVybiBlO1xufVxuLy8gY3JlYXRlTGlFbGVtZW50XG5leHBvcnQgZnVuY3Rpb24gY0xJKGlubmVyVGV4dDogc3RyaW5nLCBjbGFzc2VzOiBzdHJpbmdbXSwgaWQ/OiBzdHJpbmcsIG9uQ2xpY2tGbj86ICgpID0+IGFueSkge1xuXHRjb25zdCBsaSA9IGNlKFwibGlcIik7XG5cdGxpLmlubmVyVGV4dCA9IGlubmVyVGV4dDtcblx0Y2xhc3Nlcy5mb3JFYWNoKF8gPT4gYWRkQyhsaSwgXykpO1xuXHRpZiAoaWQpIGxpLmlkID0gaWQ7XG5cdGlmIChvbkNsaWNrRm4pIG9uQ2xpY2sobGksIG9uQ2xpY2tGbik7XG5cdHJldHVybiBsaTtcbn1cbi8vIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiByZW1DKGVsbTogSFRNTEVsZW1lbnQsIGNsczogc3RyaW5nKSB7XG5cdGVsbS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG59XG4vLyBhZGRDbGFzc1RvRWxlbWVudFxuZXhwb3J0IGZ1bmN0aW9uIGFkZEMoZWxtOiBIVE1MRWxlbWVudCwgY2xzOiBzdHJpbmcpIHtcblx0ZWxtLmNsYXNzTGlzdC5hZGQoY2xzKTtcbn1cbi8vIHNldENsYXNzVG9FbGVtZW50XG5leHBvcnQgZnVuY3Rpb24gc2V0QyhlbG06IEhUTUxFbGVtZW50LCBjbHM6IHN0cmluZywgZW5hYmxlOiBib29sZWFuKSB7XG5cdGlmIChlbmFibGUpIGVsbS5jbGFzc0xpc3QuYWRkKGNscyk7XG5cdGVsc2UgZWxtLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbn1cbi8vIHJlbW92ZUFsbENoaWxkcmVuXG5leHBvcnQgZnVuY3Rpb24gcmVtQWxsKGVsbTogSFRNTEVsZW1lbnQpIHtcblx0d2hpbGUgKGVsbS5maXJzdENoaWxkKVxuXHRcdGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG59XG4vLyBhZGRPbkNsaWNrRXZlbnRMaXN0ZW5lclxuZXhwb3J0IGZ1bmN0aW9uIG9uQ2xpY2soZWxtOiBIVE1MRWxlbWVudCwgZm46IChldjogSFRNTEVsZW1lbnRFdmVudE1hcFtcImNsaWNrXCJdKSA9PiBhbnkpIHtcblx0ZWxtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmbik7XG59XG4iLCJpbXBvcnQgeyBvcHQgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCB0eXBlIFRleHR1cmVTb3VyY2UgPSBIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQgfCBJbWFnZUJpdG1hcCB8IE9mZnNjcmVlbkNhbnZhcztcbmV4cG9ydCBpbnRlcmZhY2UgVGV4dHVyZUkge1xuXHRyZWFkb25seSByZWFkeTogYm9vbGVhblxufVxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNJPFQgZXh0ZW5kcyBUZXh0dXJlSSwgQz4geyAvLyBUOiBUZXh0dXJlLCBDOiBDb2xvclxuXHRmaXRTaXplQW5kQ2xlYXIoKTogdm9pZFxuXHRjbGVhcihjb2xvcj86IEMpOiB2b2lkXG5cdGdldFRleHR1cmUoaW1hZ2U6IFRleHR1cmVTb3VyY2UsIHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHNyY1c/OiBudW1iZXIsIHNyY0g/OiBudW1iZXIsIGRzdFc/OiBudW1iZXIsIGRzdEg/OiBudW1iZXIpOiBUXG5cdHRleHR1cmUodGV4dHVyZTogVCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJvdD86IG51bWJlcik6IHZvaWRcblx0ZWxsaXBzZShmaWxsOiBDLCBzdHJva2U6IEMsIHg6IG51bWJlciwgeTogbnVtYmVyLCByeDogbnVtYmVyLCByeT86IG51bWJlcik6IHZvaWRcblx0cmVjdChmaWxsOiBDLCBzdHJva2U6IEMsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg/OiBudW1iZXIsIHJvdD86IG51bWJlcik6IHZvaWRcblx0Zmx1c2goKTogdm9pZFxufVxuZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZUkge1xuXHRpbWFnZTogVGV4dHVyZVNvdXJjZVxuXHRzcmNYOiBudW1iZXJcblx0c3JjWTogbnVtYmVyXG5cdHNyY1c6IG51bWJlclxuXHRzcmNIOiBudW1iZXJcblx0ZHN0VzogbnVtYmVyXG5cdGRzdEg6IG51bWJlclxufVxuZXhwb3J0IGNsYXNzIENhbnZhcyBpbXBsZW1lbnRzIENhbnZhc0k8VGV4dHVyZSwgc3RyaW5nPiB7XG5cdHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5cdHByaXZhdGUgY3R4SDogbnVtYmVyO1xuXHRwcml2YXRlIGN0eFc6IG51bWJlcjtcblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuXHRcdHByaXZhdGUgcGFyZW50OiBIVE1MRWxlbWVudCxcblx0XHRzaG91bGRGaXRTaXplID0gdHJ1ZSxcblx0KSB7XG5cdFx0Y29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7IGFscGhhOiBmYWxzZSB9KTtcblx0XHRpZiAoIWN0eCkgdGhyb3cgYEZhaWxlZDogY2FudmFzLmdldENvbnRleHQoXCIyZFwiKWA7XG5cdFx0dGhpcy5jdHggPSBjdHg7XG5cdFx0dGhpcy5jdHhIID0gMDtcblx0XHR0aGlzLmN0eFcgPSAwO1xuXHRcdGlmIChzaG91bGRGaXRTaXplKSB0aGlzLmZpdFNpemVBbmRDbGVhcigpO1xuXHR9XG5cdGZpdFNpemVBbmRDbGVhcihjb2xvcj86IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNhbnZhcywgcCA9IHRoaXMucGFyZW50O1xuXHRcdGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cdFx0Yy5zdHlsZS53aWR0aCA9IHAuY2xpZW50V2lkdGggKyBcInB4XCI7XG5cdFx0Yy5zdHlsZS5oZWlnaHQgPSBwLmNsaWVudEhlaWdodCArIFwicHhcIjtcblx0XHR0aGlzLmN0eFcgPSBjLndpZHRoID0gcC5jbGllbnRXaWR0aCAqIGRwcjtcblx0XHR0aGlzLmN0eEggPSBjLmhlaWdodCA9IHAuY2xpZW50SGVpZ2h0ICogZHByO1xuXHRcdHRoaXMuY3R4LmxpbmVXaWR0aCA9IGRwcjtcblx0XHR0aGlzLmNsZWFyKGNvbG9yKTtcblx0fVxuXHRjbGVhcihjb2xvcj86IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmN0eDtcblx0XHRpZiAoY29sb3IpIHtcblx0XHRcdGMuY2xvc2VQYXRoKCk7XG5cdFx0XHRjLmZpbGxTdHlsZSA9IGNvbG9yO1xuXHRcdFx0Yy5maWxsUmVjdCgwLCAwLCB0aGlzLmN0eFcsIHRoaXMuY3R4SCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGMuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY3R4VywgdGhpcy5jdHhIKTtcblx0XHR9XG5cdH1cblx0Z2V0VGV4dHVyZShpbWFnZTogVGV4dHVyZVNvdXJjZSwgeD86IG51bWJlciwgeT86IG51bWJlciwgc3JjVz86IG51bWJlciwgc3JjSD86IG51bWJlciwgZHN0Vz86IG51bWJlciwgZHN0SD86IG51bWJlcik6IFRleHR1cmUge1xuXHRcdHggPSBvcHQoMCwgeCk7XG5cdFx0eSA9IG9wdCgwLCB5KTtcblx0XHRzcmNXID0gb3B0KGltYWdlLndpZHRoLCBzcmNXKTtcblx0XHRzcmNIID0gb3B0KGltYWdlLmhlaWdodCwgc3JjSCk7XG5cdFx0ZHN0VyA9IG9wdChzcmNXLCBkc3RXKTtcblx0XHRkc3RIID0gb3B0KHNyY0gsIGRzdEgpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbWFnZTogaW1hZ2UsXG5cdFx0XHRyZWFkeTogdHJ1ZSxcblx0XHRcdHNyY1g6IHgsIHNyY1k6IHksXG5cdFx0XHRzcmNILCBzcmNXLCBkc3RXLCBkc3RIXG5cdFx0fTtcblx0fVxuXHR0ZXh0dXJlKHRleHR1cmU6IFRleHR1cmUsIGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHJvdD86IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmN0eDtcblx0XHRjb25zdCB0ID0gdGV4dHVyZTtcblx0XHRpZiAocm90KSB7XG5cdFx0XHRjb25zdCBmID0gYy5nZXRUcmFuc2Zvcm0oKSwgdyA9IHQuZHN0VywgaCA9IHQuZHN0SDtcblx0XHRcdGMudHJhbnNsYXRlKGN4LCBjeSk7XG5cdFx0XHRjLnJvdGF0ZShyb3QpO1xuXHRcdFx0Yy5kcmF3SW1hZ2UodC5pbWFnZSwgdC5zcmNYLCB0LnNyY1ksIHQuc3JjVywgdC5zcmNILCAtdyAvIDIsIC1oIC8gMiwgdC5kc3RXLCB0LmRzdEgpO1xuXHRcdFx0Yy5zZXRUcmFuc2Zvcm0oZik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGMuZHJhd0ltYWdlKHQuaW1hZ2UsIHQuc3JjWCwgdC5zcmNZLCB0LnNyY1csIHQuc3JjSCwgY3ggLSB0LmRzdFcgLyAyLCBjeSAtIHQuZHN0SCAvIDIsIHQuZHN0VywgdC5kc3RIKTtcblx0XHR9XG5cdH1cblx0ZWxsaXBzZShmaWxsOiBzdHJpbmcsIHN0cm9rZTogc3RyaW5nLCBjeDogbnVtYmVyLCBjeTogbnVtYmVyLCB3OiBudW1iZXIsIGg/OiBudW1iZXIsIHJvdD86IG51bWJlcik6IHZvaWQge1xuXHRcdGNvbnN0IGMgPSB0aGlzLmN0eDtcblx0XHRjLmZpbGxTdHlsZSA9IGZpbGw7XG5cdFx0Yy5zdHJva2VTdHlsZSA9IHN0cm9rZTtcblx0XHRjLmJlZ2luUGF0aCgpO1xuXHRcdGlmIChyb3QpIHtcblx0XHRcdGNvbnN0IGYgPSBjLmdldFRyYW5zZm9ybSgpO1xuXHRcdFx0Yy50cmFuc2xhdGUoY3gsIGN5KTtcblx0XHRcdGMucm90YXRlKHJvdCk7XG5cdFx0XHRjLmVsbGlwc2UoMCwgMCwgdyAvIDIsIG9wdCh3LCBoKSAvIDIsIDAsIDAsIE1hdGguUEkgKiAyKTtcblx0XHRcdGMuc2V0VHJhbnNmb3JtKGYpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjLmVsbGlwc2UoY3gsIGN5LCB3IC8gMiwgb3B0KHcsIGgpIC8gMiwgMCwgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdH1cblx0XHRjLmNsb3NlUGF0aCgpO1xuXHRcdGlmIChmaWxsLmxlbmd0aCkgYy5maWxsKCk7XG5cdFx0aWYgKHN0cm9rZS5sZW5ndGgpIGMuc3Ryb2tlKCk7XG5cdH1cblx0cmVjdChmaWxsOiBzdHJpbmcsIHN0cm9rZTogc3RyaW5nLCBjeDogbnVtYmVyLCBjeTogbnVtYmVyLCB3OiBudW1iZXIsIGg/OiBudW1iZXIsIHJvdD86IG51bWJlcik6IHZvaWQge1xuXHRcdGggPSBvcHQodywgaCk7XG5cdFx0Y29uc3QgYyA9IHRoaXMuY3R4O1xuXHRcdGMuZmlsbFN0eWxlID0gZmlsbDtcblx0XHRjLnN0cm9rZVN0eWxlID0gc3Ryb2tlO1xuXHRcdGMuYmVnaW5QYXRoKCk7XG5cdFx0aWYgKHJvdCkge1xuXHRcdFx0Y29uc3QgdCA9IGMuZ2V0VHJhbnNmb3JtKCk7XG5cdFx0XHRjLnRyYW5zbGF0ZShjeCwgY3kpO1xuXHRcdFx0Yy5yb3RhdGUocm90KTtcblx0XHRcdGMucmVjdCgtdyAvIDIsIC1oIC8gMiwgdywgaCk7XG5cdFx0XHRjLnNldFRyYW5zZm9ybSh0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Yy5yZWN0KGN4IC0gdyAvIDIsIGN5IC0gaCAvIDIsIHcsIGgpO1xuXHRcdH1cblx0XHRjLmNsb3NlUGF0aCgpO1xuXHRcdGlmIChmaWxsLmxlbmd0aCkgYy5maWxsKCk7XG5cdFx0aWYgKHN0cm9rZS5sZW5ndGgpIGMuc3Ryb2tlKCk7XG5cdH1cblx0Zmx1c2goKTogdm9pZCB7XG5cdFx0Ly8gw6PCgcKZw6PCgcK5w6PCgcKmw6PCgcKuw6PCgsKzw6PCg8Kew6PCg8Kzw6PCg8KJw6PCgcKvw6PCgMKBw6XCrsKfw6jCocKMw6PCgcKVw6PCgsKMw6PCgsKLw6PCgcKow6PCgcKow6PCgsKCw6PCgcKrw6PCgsKtw6PCg8Kjw6PCg8Kzw6PCg8KQw6PCgsK5w6PCgcKrw6XCj8KNw6bCmMKgw6PCgcKVw6PCgsKMw6PCgsKLw6PCgcKfw6PCgsKBw6PCgMKBZG8gbm90aGluZy5cblx0fVxufVxuIiwiZXhwb3J0IGludGVyZmFjZSBHYW1lRnVuY3Mge1xuXHRpbml0KClcblx0cmVzdW1lKClcblx0dXBkYXRlKClcblx0ZHJhdyhsZWZ0b3ZlcjogbnVtYmVyKSAvLyAwIDw9IGxlZnRvdmVyXG5cdHBhdXNlKClcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZlJlcG9ydGVyIHtcblx0cGVyZk9mVXBkYXRlKHRpbWVTcGFuOiBudW1iZXIsIGNvdW50OiBudW1iZXIpOiB2b2lkXG5cdHBlcmZPZkRyYXcodGltZVNwYW46IG51bWJlcilcbn1cbmNvbnN0IGR1bW15UGVyZlJlcG9ydGVyOiBQZXJmUmVwb3J0ZXIgPSB7XG5cdHBlcmZPZkRyYXc6ICgpID0+IHsgfSxcblx0cGVyZk9mVXBkYXRlOiAoKSA9PiB7IH0sXG59XG5leHBvcnQgY2xhc3MgR2FtZUxvb3Age1xuXHRwZXJmUmVwb3J0ZXI6IFBlcmZSZXBvcnRlciA9IGR1bW15UGVyZlJlcG9ydGVyO1xuXHRwcml2YXRlIGlzU3RhcnRlZCA9IGZhbHNlO1xuXHRwcml2YXRlIGFuaUhhbmRsZXIgPSAwO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGZ1bmNzOiBHYW1lRnVuY3MsXG5cdFx0cHJpdmF0ZSB1cGRhdGVQZXJpb2QgPSAxMDAwIC8gNjAsIC8vIG1zXG5cdFx0cHJpdmF0ZSBtYXhMYWcgPSBNYXRoLm1heCg1MCwgdXBkYXRlUGVyaW9kICogNCksIC8vIG1zXG5cdCkge1xuXHRcdGZ1bmNzLmluaXQoKTtcblx0fVxuXHRzdGFydCgpIHtcblx0XHRpZiAodGhpcy5pc1N0YXJ0ZWQpIHJldHVybjtcblx0XHRsZXQgbGFnID0gMCwgcHJldlRpbWUgPSAtMTtcblx0XHRjb25zdCBmbiA9ICgpID0+IHtcblx0XHRcdGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXHRcdFx0aWYgKHByZXZUaW1lIDwgMCkgeyAvL2luaXRpYWwgc3RlcFxuXHRcdFx0XHRwcmV2VGltZSA9IG5vdztcblx0XHRcdH1cblx0XHRcdGxhZyArPSBub3cgLSBwcmV2VGltZTtcblx0XHRcdHByZXZUaW1lID0gbm93O1xuXHRcdFx0aWYgKGxhZyA+IHRoaXMubWF4TGFnKSB7XG5cdFx0XHRcdGxhZyA9IDA7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwidGltZW91dC5cIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCB1cGRhdGVDb3VudCA9IChsYWcgLyB0aGlzLnVwZGF0ZVBlcmlvZCkgPDwgMDtcblx0XHRcdFx0bGFnICU9IHRoaXMudXBkYXRlUGVyaW9kO1xuXG5cdFx0XHRcdGNvbnN0IGJlZm9yZVVwZGF0ZXMgPSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB1cGRhdGVDb3VudDsgaSsrKVxuXHRcdFx0XHRcdHRoaXMuZnVuY3MudXBkYXRlKCk7XG5cdFx0XHRcdGlmICh1cGRhdGVDb3VudCA+IDApXG5cdFx0XHRcdFx0dGhpcy5wZXJmUmVwb3J0ZXIucGVyZk9mVXBkYXRlKHBlcmZvcm1hbmNlLm5vdygpIC0gYmVmb3JlVXBkYXRlcywgdXBkYXRlQ291bnQpO1xuXG5cdFx0XHRcdGNvbnN0IGJlZm9yZURyYXcgPSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRcdFx0dGhpcy5mdW5jcy5kcmF3KChsYWcgKyAocGVyZm9ybWFuY2Uubm93KCkgLSBub3cpKSAvIHRoaXMudXBkYXRlUGVyaW9kKTtcblx0XHRcdFx0dGhpcy5wZXJmUmVwb3J0ZXIucGVyZk9mRHJhdyhwZXJmb3JtYW5jZS5ub3coKSAtIGJlZm9yZURyYXcpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5hbmlIYW5kbGVyID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcblx0XHR9O1xuXHRcdHRoaXMuYW5pSGFuZGxlciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG5cdFx0dGhpcy5pc1N0YXJ0ZWQgPSB0cnVlO1xuXHRcdHRoaXMuZnVuY3MucmVzdW1lKCk7XG5cdH1cblx0cGF1c2UoKSB7XG5cdFx0aWYgKCF0aGlzLmlzU3RhcnRlZCkgcmV0dXJuO1xuXHRcdGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pSGFuZGxlcik7XG5cdFx0dGhpcy5pc1N0YXJ0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmZ1bmNzLnBhdXNlKCk7XG5cdH1cblx0aXNSdW5uaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLmlzU3RhcnRlZDtcblx0fVxufVxuIiwiaW1wb3J0IHsgb25Mb2FkLCBpc0Nocm9tZSB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IG9uQ2xpY2ssIGdlIH0gZnJvbSBcIi4vZG9tXCI7XG5pbXBvcnQgeyBDYW52YXMgfSBmcm9tIFwiLi9ncmFwaGljc1wiO1xuaW1wb3J0IHsgR2FtZUxvb3AgfSBmcm9tIFwiLi9mcmFtZXdvcmtcIjtcblxuc2hvd0NvbnNvbGVCYW5uZXIoKTtcblxuLy8gTGluayBVSSBldmVudHMgdG8gZnVuY3Rpb25zXG5vbkxvYWQoKCkgPT4ge1xuXHRjb25zdCBiZWdpbkdhbWUgPSBnZShcImJlZ2luX2dhbWVcIik7XG5cdG9uQ2xpY2soYmVnaW5HYW1lLCBmdW5jdGlvbiBmbigpIHtcblx0XHRiZWdpbkdhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZuKTtcblx0XHRzdGFydEdhbWUoKTtcblx0fSk7XG59KTtcblxuLy8gTWFpblxuZnVuY3Rpb24gc3RhcnRHYW1lKCkge1xuXHRjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblx0aW1nLnNyYyA9IFwiaWNvbi5zdmdcIjtcblxuXHRjb25zdCBjID0gbmV3IENhbnZhcyhnZTxIVE1MQ2FudmFzRWxlbWVudD4oXCJnYW1lX21haW5fY2FudmFzXCIpLCBnZShcImdhbWVfdmlld1wiKSk7XG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IGMuZml0U2l6ZUFuZENsZWFyKCkpO1xuXHRjb25zdCBsb29wID0gbmV3IEdhbWVMb29wKHtcblx0XHRpbml0OiAoKSA9PiAwLCByZXN1bWU6ICgpID0+IDAsIHBhdXNlOiAoKSA9PiAwLFxuXHRcdHVwZGF0ZTogKCkgPT4geyB9LFxuXHRcdGRyYXc6IChsZWZ0b3ZlcikgPT4ge1xuXHRcdFx0Yy5jbGVhcihcIiNkZWRcIik7XG5cdFx0XHRjLnJlY3QoXCIjZWVlXCIsIFwiIzIyMlwiLCAxMDAsIDEwMCwgMTAwLCAxMDApO1xuXHRcdFx0Yy50ZXh0dXJlKGMuZ2V0VGV4dHVyZShpbWcsIDAsIDAsIDUxMiwgNTEyLCAxMDAsIDEwMCksIDMwMCwgMTAwKTtcblx0XHRcdGMuZWxsaXBzZShcIiNlZWVcIiwgXCIjMjIyXCIsIDUwMCwgMTAwLCAxMDAsIDUwKTtcblx0XHRcdGMuZWxsaXBzZShcIiNlZWVcIiwgXCJcIiwgNzAwLCAxMDAsIDE1MCk7XG5cdFx0XHRjLnJlY3QoXCJcIiwgXCIjMjIyXCIsIDcwMCwgMTAwLCAxMDAsIDUwLCBsZWZ0b3ZlciAqIE1hdGguUEkpO1xuXHRcdH1cblx0fSwgMTAwMCk7XG5cdGxvb3Auc3RhcnQoKTtcblx0bG9vcC5wZXJmUmVwb3J0ZXIgPSB7XG5cdFx0cGVyZk9mRHJhdzogdHMgPT4gdHMgPCAxMCA/IDAgOiBjb25zb2xlLmxvZyhcImRyYXcuLi4gXCIsIHRzLnRvRml4ZWQoMSkpLFxuXHRcdHBlcmZPZlVwZGF0ZTogKHRzLCBjbnQpID0+ICh0cyAvIGNudCkgPCAxMCA/IDAgOiBjb25zb2xlLmxvZyhcInVwZGF0ZS4gXCIsICh0cyAvIGNudCkudG9GaXhlZCgxKSksXG5cdH1cblx0d2luZG93W1wibFwiXSA9IGxvb3A7XG59XG5cbi8vIEJhbm5lclxuZnVuY3Rpb24gc2hvd0NvbnNvbGVCYW5uZXIoKSB7XG5cdGlmIChpc0Nocm9tZSgpKSB7XG5cdFx0Y29uc29sZS5sb2coXG5cdFx0XHRcIlxcblwiICtcblx0XHRcdGAlYyAlYyBBSSBDR1AgUHJhY3RpY2VcXG5gICtcblx0XHRcdFwiJWMgJWMgTWFkZSBieSBvbWFzYWt1biBpbiAyMDE5XFxuXCIgK1xuXHRcdFx0XCIlYyAlYyBHaXRIdWI6IGh0dHBzOi8vZ2l0aHViLmNvbS9vbWFzYWt1bi9haS1jZ3AtcHJhY3RpY2VcXG5cIiArXG5cdFx0XHRcIiVjICVjIEF1dGhvcjogaHR0cHM6Ly9naXRodWIuY29tL29tYXNha3VuXFxuXCIgK1xuXHRcdFx0XCIlYyAlYyBFbmpveSFcXG5cIixcblx0XHRcdFwiY29sb3I6ICMxMzBmNDA7IGJhY2tncm91bmQtY29sb3I6ICNhNzk5ZWY7IGxpbmUtaGVpZ2h0OiAyO1wiLFxuXHRcdFx0XCJjb2xvcjogI2RkZDZmZjsgYmFja2dyb3VuZC1jb2xvcjogIzUyNDk4MzsgbGluZS1oZWlnaHQ6IDI7XCIsXG5cdFx0XHRcImNvbG9yOiAjMTMwZjQwOyBiYWNrZ3JvdW5kLWNvbG9yOiAjYTc5OWVmOyBsaW5lLWhlaWdodDogMS41O1wiLFxuXHRcdFx0XCJcIixcblx0XHRcdFwiY29sb3I6ICMxMzBmNDA7IGJhY2tncm91bmQtY29sb3I6ICNhNzk5ZWY7IGxpbmUtaGVpZ2h0OiAxLjU7XCIsXG5cdFx0XHRcIlwiLFxuXHRcdFx0XCJjb2xvcjogIzEzMGY0MDsgYmFja2dyb3VuZC1jb2xvcjogI2E3OTllZjsgbGluZS1oZWlnaHQ6IDEuNTtcIixcblx0XHRcdFwiXCIsXG5cdFx0XHRcImNvbG9yOiAjMTMwZjQwOyBiYWNrZ3JvdW5kLWNvbG9yOiAjYTc5OWVmOyBsaW5lLWhlaWdodDogMS41O1wiLFxuXHRcdFx0XCJmb250LXdlaWdodDogYm9sZFwiXG5cdFx0KTtcblx0fSBlbHNlIHtcblx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFwiXFxuXCIgK1xuXHRcdFx0YMOiwpTCgyAjIyMgQUkgQ0dQIFByYWN0aWNlICMjIyBcXG5gICtcblx0XHRcdFwiw6LClMKDIFxcblwiICtcblx0XHRcdFwiw6LClMKDIE1hZGUgYnkgb21hc2FrdW4gaW4gMjAxOVxcblwiICtcblx0XHRcdFwiw6LClMKDIEdpdEh1YjogaHR0cHM6Ly9naXRodWIuY29tL29tYXNha3VuL2FpLWNncC1wcmFjdGljZVxcblwiICtcblx0XHRcdFwiw6LClMKDIEF1dGhvcjogaHR0cHM6Ly9naXRodWIuY29tL29tYXNha3VuXFxuXCIgK1xuXHRcdFx0XCLDosKUwoMgRW5qb3khXFxuXCJcblx0XHQpO1xuXHR9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O2FBRWdCLFFBQVE7UUFDdkIsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0FBR0QsYUFBZ0IsTUFBTSxDQUFDLEVBQWE7UUFDbkMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0FBRUQsYUFpQmdCLEdBQUcsQ0FBSSxZQUFlLEVBQUUsS0FBcUI7UUFDNUQsSUFBSSxLQUFLLEtBQUssU0FBUztZQUFFLE9BQU8sWUFBWSxDQUFDO1FBQzdDLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQzs7YUMxQmUsRUFBRSxDQUFzQyxFQUFVO1FBQ2pFLE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQU0sQ0FBQztJQUN6QyxDQUFDO0FBRUQsYUEwQ2dCLE9BQU8sQ0FBQyxHQUFnQixFQUFFLEVBQTZDO1FBQ3RGLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7VUM3QlksTUFBTTtRQUlsQixZQUNTLE1BQXlCLEVBQ3pC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
